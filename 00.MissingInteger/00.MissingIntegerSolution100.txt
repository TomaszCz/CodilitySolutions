using System;

class Solution {
    public int solution(int[] A) {
        bool[] b = new bool[A.Length];
        
        for(int i = 0; i < A.Length; ++i){
            if(A[i] > 0 && A[i] <= A.Length)
            {
                b[A[i] -1] = true;
            }
        }
        
        for(int j = 0; j < b.Length-1; ++j){
            if(!b[j]) return j+1;
        }

        if(A.Length > 1)
        {
            return A.Length + 1;
        }
        if(A[0] == 1)
            return 2;
        else
            return A.Length;
    }
}



Description:

By pigeonhole principle, at least one of the numbers 1, 2, ..., n+1 is not in the array. Let us create a boolean array b of size n+1 to store whether each of these numbers is present.

Now, we process the input array. If we find a number from 1 to n+1, we mark the corresponding entry in b. If the number we see does not fit into these bounds, just discard it and proceed to the next one. Both cases are O(1) per input entry, total O(n).

After we are done processing the input, we can find the first non-marked entry in our boolean array b trivially in O(n).

Edge cases like one element array with [1] need to be check at the end.
